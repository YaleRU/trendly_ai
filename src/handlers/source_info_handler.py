import logging

from pyrogram import Client
from pyrogram.enums import ParseMode
from pyrogram.types import Message

from src.commands import CommandAlias
from src.handlers.common import get_user_by_telegram_id_safe, MissingEntityError
from src.utils import date as date_utils

logger = logging.getLogger(__name__)


async def validate_command_args(message: Message) -> None | tuple[int]:
    command_args = message.command

    if not command_args or len(command_args) < 2:
        await message.reply_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{CommandAlias.source_info.value} [id]")
        return None

    try:
        source_id = int(command_args[1])
        return (source_id,)
    except Exception as e:
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ' + command_args[1], e)
        return None


async def source_info_handler(_client: Client, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–æ –µ–≥–æ URL"""
    try:
        command_args = await validate_command_args(message)

        if not command_args:
            return

        user = await get_user_by_telegram_id_safe(message, message.from_user.id)
        (source_id,) = command_args

        source = next((source for source in user.sources if source.id == source_id), None)

        if not source:
            await message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
            return

        def get_formated_last_check() -> str:
            if source.last_checked_time:
                local_date = date_utils.to_local(source.last_checked_time)
                return date_utils.get_formatted_datestr(local_date)
            elif source.is_updating:
                return '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å...'
            else:
                return '–ù–∏–∫–æ–≥–¥–∞'

        response = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ:</b>\n\n"
            f"<b>ID:</b> {source.id}\n"
            f"<b>–¢–∏–ø:</b> {source.type.value}\n"
            f"<b>URL:</b> {source.target}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {get_formated_last_check()}\n\n"
            f"<b>–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π:</b> {len(source.articles)}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è:</b> {source.last_checked_article_id or '–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–æ—Å—å'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{CommandAlias.remove_source.value} {source.id} —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫."
        )

        await message.reply_text(response, parse_mode=ParseMode.HTML)

    except MissingEntityError:
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /{CommandAlias.source_info.value}: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ.")
