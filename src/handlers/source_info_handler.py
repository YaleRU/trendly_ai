from pyrogram import Client
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from src.database import db
from src.commands import CommandAlias
import logging

logger = logging.getLogger(__name__)


async def source_info_handler(_client: Client, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–æ –µ–≥–æ URL"""
    try:
        command_args = message.command

        if len(command_args) < 2:
            await message.reply_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /{CommandAlias.source_info.value} id")
            return

        # –ò—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –ë–î
        source = db.get_source(command_args[1])

        if not source:
            await message.reply_text("–ò—Å—Ç–æ—á–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
            return

        response = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ:</b>\n\n"
            f"<b>ID:</b> {source['id']}\n"
            f"<b>–¢–∏–ø:</b> {source['type']}\n"
            f"<b>URL:</b> {source['target']}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {source['last_checked_time'] or ('–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å...' if source['is_updating'] != 0 else '–ù–∏–∫–æ–≥–¥–∞')}\n\n"
            f"<b>–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π:</b> {len(db.get_articles(source['id']))}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è:</b> {source['last_checked_article_id'] or '–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–æ—Å—å'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{CommandAlias.remove_source.value} {source['id']} —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫."
        )

        await message.reply_text(response, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /{CommandAlias.source_info.value}: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ.")
